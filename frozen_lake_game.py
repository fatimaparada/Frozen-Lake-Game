# -*- coding: utf-8 -*-
"""frozen lake game

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bvT70GHUqz6PAg_nucVi81LAnCThlJjk
"""

import gym
import numpy
import time

start_time = time.time()
# Load imported environment built in game
environement = gym.make('FrozenLake-v0')

# Acquire Q table
Q = numpy.zeros([environement.observation_space.n,
                 environement.action_space.n])

if __name__ == "__main__":
    # Set up parameter
    learning_rate = .4
    discount_rate = .3
    episode = 4000
    reward_list = []

    # Main Algorithm
    for i in range(episode):

        # Reset environment
        old_state = environement.reset()
        print("======START=====")

        environement.render()
        print("================")
        print("    Episode {0}".format(i))
        print("================")

        done = False
        move_counter = 0

        while True:
            print("++++++++++++++++")
            print("     Move {0}".format(move_counter+1))
            print("++++++++++++++++")
            # Choosing action from q-table
            action = numpy.argmax(Q[old_state, :] + (1/(i+1))*numpy.random.randn(1,
                                                                                 environement.action_space.n))
            # Get new state & reward from environment after taking the action
            new_state, reward, done, info = environement.step(action)
            # Append new reward
            reward_list.append(reward)
            environement.render()

            # Update Q-Table with new state,reward
            Q[old_state, action] += learning_rate * \
                (reward + discount_rate *
                 numpy.max(Q[new_state, :]) - Q[old_state, action])

            old_state = new_state
            move_counter += 1

            if done == True:
                break
        print("Finished after", move_counter, "moves", "\n")
    Q_target = discount_rate * numpy.max(Q[new_state, :])
    loss = numpy.sum(numpy.subtract(Q_target, Q)**2)

    print("Q table:\n", Q)
    print("Lost:", loss)
    print("Sum reward ", sum(reward_list)/episode)
    print("Run time:", time.time()-start_time, "(s)")